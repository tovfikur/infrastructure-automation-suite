# Docker Compose for MCP Distributed Monitoring System
# This setup provides a complete multi-service environment for testing and development

version: '3.8'

services:
  # Main MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: mcp-main-server
    ports:
      - "8080:8080"
      - "9090:9090"  # Prometheus metrics
    environment:
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - MCP_CONFIG_PATH=/app/configs/mcp-config.yml
      - PYTHONPATH=/app
    volumes:
      - ./configs:/app/configs:ro
      - ./error_patterns:/app/error_patterns:ro
      - ./fix_templates:/app/fix_templates:ro
      - ./logs:/var/log/mcp
      - ./backups:/var/backups/mcp
      - ./ssh-keys:/app/ssh-keys:ro
    depends_on:
      - redis
      - postgres
      - nginx
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: mcp-postgres
    environment:
      - POSTGRES_DB=testdb
      - POSTGRES_USER=testuser
      - POSTGRES_PASSWORD=testpass
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./test-data/postgres:/docker-entrypoint-initdb.d
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL MCP Client
  postgres-client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: mcp-postgres-client
    environment:
      - CLIENT_CONFIG_PATH=/app/configs/client-configs/postgres-client.yml
      - POSTGRES_PASSWORD=testpass
      - PYTHONPATH=/app
    volumes:
      - ./configs:/app/configs:ro
      - ./error_patterns:/app/error_patterns:ro
      - ./clients:/app/clients:ro
      - ./logs:/var/log/mcp
    depends_on:
      - postgres
      - mcp-server
    networks:
      - mcp-network
    restart: unless-stopped
    command: ["python", "-m", "clients.postgres_client", "/app/configs/client-configs/postgres-client.yml"]

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=testpass
    command: redis-server --requirepass testpass --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "testpass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis MCP Client
  redis-client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: mcp-redis-client
    environment:
      - CLIENT_CONFIG_PATH=/app/configs/client-configs/redis-client.yml
      - REDIS_PASSWORD=testpass
      - PYTHONPATH=/app
    volumes:
      - ./configs:/app/configs:ro
      - ./error_patterns:/app/error_patterns:ro
      - ./clients:/app/clients:ro
      - ./logs:/var/log/mcp
    depends_on:
      - redis
      - mcp-server
    networks:
      - mcp-network
    restart: unless-stopped
    command: ["python", "-m", "clients.redis_client", "/app/configs/client-configs/redis-client.yml"]

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./test-data/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./test-data/nginx/html:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx MCP Client
  nginx-client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: mcp-nginx-client
    environment:
      - CLIENT_CONFIG_PATH=/app/configs/client-configs/nginx-client.yml
      - PYTHONPATH=/app
    volumes:
      - ./configs:/app/configs:ro
      - ./error_patterns:/app/error_patterns:ro
      - ./clients:/app/clients:ro
      - ./logs:/var/log/mcp
      - nginx_logs:/var/log/nginx:ro
    depends_on:
      - nginx
      - mcp-server
    networks:
      - mcp-network
    restart: unless-stopped
    command: ["python", "-m", "clients.nginx_client", "/app/configs/client-configs/nginx-client.yml"]

  # Odoo Application (Optional - for testing)
  odoo:
    image: odoo:16.0
    container_name: mcp-odoo
    ports:
      - "8069:8069"
    environment:
      - HOST=postgres
      - USER=testuser
      - PASSWORD=testpass
    volumes:
      - odoo_data:/var/lib/odoo
      - odoo_logs:/var/log/odoo
    depends_on:
      - postgres
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8069/web/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Odoo MCP Client
  odoo-client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: mcp-odoo-client
    environment:
      - CLIENT_CONFIG_PATH=/app/configs/client-configs/odoo-client.yml
      - ODOO_DB_PASSWORD=testpass
      - ODOO_ADMIN_PASSWORD=admin
      - PYTHONPATH=/app
    volumes:
      - ./configs:/app/configs:ro
      - ./error_patterns:/app/error_patterns:ro
      - ./clients:/app/clients:ro
      - ./logs:/var/log/mcp
      - odoo_logs:/var/log/odoo:ro
    depends_on:
      - odoo
      - mcp-server
    networks:
      - mcp-network
    restart: unless-stopped
    command: ["python", "-m", "clients.odoo_client", "/app/configs/client-configs/odoo-client.yml"]

  # Prometheus (Optional - for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - mcp-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana (Optional - for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - mcp-network
    restart: unless-stopped

  # Log Generator (for testing error patterns)
  log-generator:
    build:
      context: .
      dockerfile: Dockerfile.log-generator
    container_name: mcp-log-generator
    environment:
      - LOG_LEVEL=INFO
      - ERROR_RATE=0.1  # 10% error rate
    volumes:
      - ./logs:/app/logs
    networks:
      - mcp-network
    restart: unless-stopped

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  odoo_data:
    driver: local
  odoo_logs:
    driver: local
  nginx_logs:
    driver: local
  grafana_data:
    driver: local

# Health check endpoints for all services
# Main server: http://localhost:8080/health
# PostgreSQL: pg_isready check
# Redis: redis-cli ping
# Nginx: http://localhost/
# Odoo: http://localhost:8069/web/health
# Prometheus: http://localhost:9091/
# Grafana: http://localhost:3000/
